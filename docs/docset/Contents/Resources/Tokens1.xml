<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AFAdView.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AFAdView</TokenIdentifier>
			<Abstract type="html">AFAdView is the Adtoma Fusion Ad view that is capable of displaying an ad served by the Adtoma Fusion.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
            
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setDelegate:</TokenIdentifier>
			<Abstract type="html">Object implementing AFAdViewDelegate to provide owning controller and receive notifications.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) id&lt;AFAdViewDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/delegate</TokenIdentifier>
			<Abstract type="html">Object implementing AFAdViewDelegate to provide owning controller and receive notifications.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) id&lt;AFAdViewDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/delegate</TokenIdentifier>
			<Abstract type="html">Object implementing AFAdViewDelegate to provide owning controller and receive notifications.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) id&lt;AFAdViewDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setAdServerAddress:</TokenIdentifier>
			<Abstract type="html">The ad server address required to load ad, without the protocol part.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *adServerAddress</Declaration>
			
			
			<Anchor>//api/name/adServerAddress</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/adServerAddress</TokenIdentifier>
			<Abstract type="html">The ad server address required to load ad, without the protocol part.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *adServerAddress</Declaration>
			
			
			<Anchor>//api/name/adServerAddress</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/adServerAddress</TokenIdentifier>
			<Abstract type="html">The ad server address required to load ad, without the protocol part.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *adServerAddress</Declaration>
			
			
			<Anchor>//api/name/adServerAddress</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setAdMediaZone:</TokenIdentifier>
			<Abstract type="html">The ad media zone required to load ad.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *adMediaZone</Declaration>
			
			
			<Anchor>//api/name/adMediaZone</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/adMediaZone</TokenIdentifier>
			<Abstract type="html">The ad media zone required to load ad.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *adMediaZone</Declaration>
			
			
			<Anchor>//api/name/adMediaZone</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/adMediaZone</TokenIdentifier>
			<Abstract type="html">The ad media zone required to load ad.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *adMediaZone</Declaration>
			
			
			<Anchor>//api/name/adMediaZone</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setAdLayout:</TokenIdentifier>
			<Abstract type="html">The ad layout required to load ad.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *adLayout</Declaration>
			
			
			<Anchor>//api/name/adLayout</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/adLayout</TokenIdentifier>
			<Abstract type="html">The ad layout required to load ad.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *adLayout</Declaration>
			
			
			<Anchor>//api/name/adLayout</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/adLayout</TokenIdentifier>
			<Abstract type="html">The ad layout required to load ad.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *adLayout</Declaration>
			
			
			<Anchor>//api/name/adLayout</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setAdSpaceName:</TokenIdentifier>
			<Abstract type="html">The space name where the creative is placed.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *adSpaceName</Declaration>
			
			
			<Anchor>//api/name/adSpaceName</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/adSpaceName</TokenIdentifier>
			<Abstract type="html">The space name where the creative is placed.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *adSpaceName</Declaration>
			
			
			<Anchor>//api/name/adSpaceName</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/adSpaceName</TokenIdentifier>
			<Abstract type="html">The space name where the creative is placed.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *adSpaceName</Declaration>
			
			
			<Anchor>//api/name/adSpaceName</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setAdPlacementType:</TokenIdentifier>
			<Abstract type="html">The placement type of the ad in the application (inline or interstitial).</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AFPlacementType adPlacementType</Declaration>
			
			
			<Anchor>//api/name/adPlacementType</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/adPlacementType</TokenIdentifier>
			<Abstract type="html">The placement type of the ad in the application (inline or interstitial).</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AFPlacementType adPlacementType</Declaration>
			
			
			<Anchor>//api/name/adPlacementType</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/adPlacementType</TokenIdentifier>
			<Abstract type="html">The placement type of the ad in the application (inline or interstitial).</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AFPlacementType adPlacementType</Declaration>
			
			
			<Anchor>//api/name/adPlacementType</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setMaxSize:</TokenIdentifier>
			<Abstract type="html">The maximum size the ad view can be resized to.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) CGSize maxSize</Declaration>
			
			
			<Anchor>//api/name/maxSize</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/maxSize</TokenIdentifier>
			<Abstract type="html">The maximum size the ad view can be resized to.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) CGSize maxSize</Declaration>
			
			
			<Anchor>//api/name/maxSize</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/maxSize</TokenIdentifier>
			<Abstract type="html">The maximum size the ad view can be resized to.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) CGSize maxSize</Declaration>
			
			
			<Anchor>//api/name/maxSize</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setShowCloseIndicatorOnBannerAds:</TokenIdentifier>
			<Abstract type="html">Flags whether the close indicator (the x in the upper right corner) should be visible for banner ads. Default is YES.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL showCloseIndicatorOnBannerAds</Declaration>
			
			
			<Anchor>//api/name/showCloseIndicatorOnBannerAds</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/showCloseIndicatorOnBannerAds</TokenIdentifier>
			<Abstract type="html">Flags whether the close indicator (the x in the upper right corner) should be visible for banner ads. Default is YES.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL showCloseIndicatorOnBannerAds</Declaration>
			
			
			<Anchor>//api/name/showCloseIndicatorOnBannerAds</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/showCloseIndicatorOnBannerAds</TokenIdentifier>
			<Abstract type="html">Flags whether the close indicator (the x in the upper right corner) should be visible for banner ads. Default is YES.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL showCloseIndicatorOnBannerAds</Declaration>
			
			
			<Anchor>//api/name/showCloseIndicatorOnBannerAds</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setShowCloseEventRegionOnBannerAds:</TokenIdentifier>
			<Abstract type="html">Flags whether the close event region (50x50 area in the upper right corner of the ad) should be present for banner ads. Default is YES.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL showCloseEventRegionOnBannerAds</Declaration>
			
			
			<Anchor>//api/name/showCloseEventRegionOnBannerAds</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/showCloseEventRegionOnBannerAds</TokenIdentifier>
			<Abstract type="html">Flags whether the close event region (50x50 area in the upper right corner of the ad) should be present for banner ads. Default is YES.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL showCloseEventRegionOnBannerAds</Declaration>
			
			
			<Anchor>//api/name/showCloseEventRegionOnBannerAds</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/showCloseEventRegionOnBannerAds</TokenIdentifier>
			<Abstract type="html">Flags whether the close event region (50x50 area in the upper right corner of the ad) should be present for banner ads. Default is YES.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL showCloseEventRegionOnBannerAds</Declaration>
			
			
			<Anchor>//api/name/showCloseEventRegionOnBannerAds</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setEnableDeviceLocationTracking:</TokenIdentifier>
			<Abstract type="html">Flags whether the AFAdView should monitor the location of the device (GPS), which can be provided for the ads requesting it (e.g. in case of geotargeting).</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL enableDeviceLocationTracking</Declaration>
			
			
			<Anchor>//api/name/enableDeviceLocationTracking</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/enableDeviceLocationTracking</TokenIdentifier>
			<Abstract type="html">Flags whether the AFAdView should monitor the location of the device (GPS), which can be provided for the ads requesting it (e.g. in case of geotargeting).</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL enableDeviceLocationTracking</Declaration>
			
			
			<Anchor>//api/name/enableDeviceLocationTracking</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/enableDeviceLocationTracking</TokenIdentifier>
			<Abstract type="html">Flags whether the AFAdView should monitor the location of the device (GPS), which can be provided for the ads requesting it (e.g. in case of geotargeting).</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL enableDeviceLocationTracking</Declaration>
			
			
			<Anchor>//api/name/enableDeviceLocationTracking</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setAutoResizeToCreativeSize:</TokenIdentifier>
			<Abstract type="html">Flag indicating whether the size of the AFAdView shall be automatically adjusted to the size of the ad creative.
Default is YES, so the size of the AFAdView will be updated each time the displayed creative size changes.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL autoResizeToCreativeSize</Declaration>
			
			
			<Anchor>//api/name/autoResizeToCreativeSize</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/autoResizeToCreativeSize</TokenIdentifier>
			<Abstract type="html">Flag indicating whether the size of the AFAdView shall be automatically adjusted to the size of the ad creative.
Default is YES, so the size of the AFAdView will be updated each time the displayed creative size changes.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL autoResizeToCreativeSize</Declaration>
			
			
			<Anchor>//api/name/autoResizeToCreativeSize</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/autoResizeToCreativeSize</TokenIdentifier>
			<Abstract type="html">Flag indicating whether the size of the AFAdView shall be automatically adjusted to the size of the ad creative.
Default is YES, so the size of the AFAdView will be updated each time the displayed creative size changes.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL autoResizeToCreativeSize</Declaration>
			
			
			<Anchor>//api/name/autoResizeToCreativeSize</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setAnimateResize:</TokenIdentifier>
			<Abstract type="html">Flats whether the resizing of the AFAdView (for example, after ad has loaded) should be animated; default is YES.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL animateResize</Declaration>
			
			
			<Anchor>//api/name/animateResize</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/animateResize</TokenIdentifier>
			<Abstract type="html">Flats whether the resizing of the AFAdView (for example, after ad has loaded) should be animated; default is YES.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL animateResize</Declaration>
			
			
			<Anchor>//api/name/animateResize</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/animateResize</TokenIdentifier>
			<Abstract type="html">Flats whether the resizing of the AFAdView (for example, after ad has loaded) should be animated; default is YES.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL animateResize</Declaration>
			
			
			<Anchor>//api/name/animateResize</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setResizeAnimationDuration:</TokenIdentifier>
			<Abstract type="html">The duration of the animation that resizes the AFAdView when the creative size changes (for example, after the ad loads); default is 0.3</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) CGFloat resizeAnimationDuration</Declaration>
			
			
			<Anchor>//api/name/resizeAnimationDuration</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/resizeAnimationDuration</TokenIdentifier>
			<Abstract type="html">The duration of the animation that resizes the AFAdView when the creative size changes (for example, after the ad loads); default is 0.3</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) CGFloat resizeAnimationDuration</Declaration>
			
			
			<Anchor>//api/name/resizeAnimationDuration</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/resizeAnimationDuration</TokenIdentifier>
			<Abstract type="html">The duration of the animation that resizes the AFAdView when the creative size changes (for example, after the ad loads); default is 0.3</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) CGFloat resizeAnimationDuration</Declaration>
			
			
			<Anchor>//api/name/resizeAnimationDuration</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setFusionParameter:withValues:reloadIfNeeded:</TokenIdentifier>
			<Abstract type="html">Sets custom fusion parameter used in ad calls. Use this method if the parameter value is an array, not a stingle string (in latter case, use the setFusionParameter:withValue:reloadIfNeeded method.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>- (void)setFusionParameter:(NSString *)name withValues:(NSArray *)value reloadIfNeeded:(BOOL)reload</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the parameter to set.</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value of the parameter to set (array of objects).</Abstract>
				</Parameter><Parameter>
					<Name>reload</Name>
					<Abstract type="html">if YES, will reload the ad if it was already loaded to make the parameter take effect.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setFusionParameter:withValues:reloadIfNeeded:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setFusionParameter:withValue:reloadIfNeeded:</TokenIdentifier>
			<Abstract type="html">Sets custom Fusion parameter used in ad calls.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>- (void)setFusionParameter:(NSString *)name withValue:(NSString *)value reloadIfNeeded:(BOOL)reload</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the parameter to set</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">The value of the parameter.</Abstract>
				</Parameter><Parameter>
					<Name>reload</Name>
					<Abstract type="html">if YES, will reload the ad if it was already loaded to make the paramter take effect</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setFusionParameter:withValue:reloadIfNeeded:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/useSecureConnection:</TokenIdentifier>
			<Abstract type="html">Sets URL scheme when connecting to Fusion servers to &apos;https&apos; if secure parameter is set to true.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>- (void)useSecureConnection:(BOOL)secure</Declaration>
			<Parameters>
				<Parameter>
					<Name>secure</Name>
					<Abstract type="html">if YES, the connection used with be https, otherwise http</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/useSecureConnection:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/loadAd</TokenIdentifier>
			<Abstract type="html">Load the ad from Adtoma Fusion ad server, with base url set to http://fusion.adtoma.com</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>- (void)loadAd</Declaration>
			
			
			<Anchor>//api/name/loadAd</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/loadAd:</TokenIdentifier>
			<Abstract type="html">Load the ad from Adtoma Fusion ad server, with custom base url.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>- (void)loadAd:(NSURL *)baseUrl</Declaration>
			<Parameters>
				<Parameter>
					<Name>baseUrl</Name>
					<Abstract type="html">base URL of the UIWebView displaying the ad.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/loadAd:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/cancelLoadAd</TokenIdentifier>
			<Abstract type="html">Cancel the last ad load request. This method is automaticall called before loadAd, too.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>- (void)cancelLoadAd</Declaration>
			
			
			<Anchor>//api/name/cancelLoadAd</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/close</TokenIdentifier>
			<Abstract type="html">Close the ad view.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>- (BOOL)close</Declaration>
			
			
			<Anchor>//api/name/close</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/updateAdSizingData</TokenIdentifier>
			<Abstract type="html">Inform the AFAdView that something changed when it comes to size of the ad/screen, or that orientation changed.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>- (void)updateAdSizingData</Declaration>
			
			
			<Anchor>//api/name/updateAdSizingData</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setAdViewVisible:</TokenIdentifier>
			<Abstract type="html">Inform the AFAdView that it become visible or hidden.</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>- (void)setAdViewVisible:(BOOL)isVisible</Declaration>
			<Parameters>
				<Parameter>
					<Name>isVisible</Name>
					<Abstract type="html">YES if the ad view is visible, NO otherwise.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setAdViewVisible:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/setLogDebugMessages:</TokenIdentifier>
			<Abstract type="html">Flag indicating whether the SDK should log debug messages (using NSLog).</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL logDebugMessages</Declaration>
			
			
			<Anchor>//api/name/logDebugMessages</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AFAdView/logDebugMessages</TokenIdentifier>
			<Abstract type="html">Flag indicating whether the SDK should log debug messages (using NSLog).</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL logDebugMessages</Declaration>
			
			
			<Anchor>//api/name/logDebugMessages</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AFAdView/logDebugMessages</TokenIdentifier>
			<Abstract type="html">Flag indicating whether the SDK should log debug messages (using NSLog).</Abstract>
			<DeclaredIn>AFAdView.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL logDebugMessages</Declaration>
			
			
			<Anchor>//api/name/logDebugMessages</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
        
        
	</File>
</Tokens>